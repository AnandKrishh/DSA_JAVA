Code Link : https://leetcode.com/problems/frequency-of-the-most-frequent-element/description/

1838. Frequency of the Most Frequent Element
The frequency of an element is the number of times it occurs in an array.
You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.
Return the maximum possible frequency of an element after performing at most k operations.
==> Example 1: <==
Input: nums = [1,2,4], k = 5
Output: 3
Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].
4 has a frequency of 3.

**APPROACH**
Here, this qns took lot of my time to solve, but after realizing the simple equation and method it was easy;
Main thing is, we take a window, where we assume the right most element is the most frequent element. For assuming
1.) we add all the elements of that window
2.) we compare that total sum with the expected sum, if the expected sum is less than or equal to the (totalSum + k), then that rightmost element can be a frequent element.
totalSum += nums[right];
expectedSum = nums[right] * (right - left - 1);
Ofcourse we gonna add 'k' to totalSum right? then equation will be (total + k) >= (nums[r] * (r - l + 1L)).


**SOLUTION**
class Solution {
    public int maxFrequency(int[] nums, int k) {
        Arrays.sort(nums);

        int r=0;//right ptr
        int l=0;//left ptr
        long max=1;
        long total=0;
        while(r<nums.length){
            total += nums[r];

            while((total + k) < (nums[r] * (r - l + 1L))){ //main equation to NOTICE
                total -= nums[l];
                l++;
            }

            max = Math.max(max, (r - l + 1L));
            r++;
        }

        return (int)max;
    }
}
